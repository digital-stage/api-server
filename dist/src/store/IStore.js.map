{"version":3,"file":"IStore.js","sourceRoot":"/","sources":["src/store/IStore.ts"],"names":[],"mappings":"","sourcesContent":["// eslint-disable-next-line @typescript-eslint/no-unused-vars\ninterface IStore {\n  /*\n    // we could implement this explicit like:\n    createUser: (initial: Partial<User>) => Promise<User>;\n    readUser: (id: UserId) => Promise<User>;\n    updateUser: (update: Partial<User>) => Promise<any>;\n    deleteUser: (id: UserId) => Promise<any>;\n    */\n\n  /* Or lazy like: :-D */\n  create: <T>(type: string, initial: Partial<T>) => Promise<T>;\n  read: <T>(type: string, id: string, filter?: Partial<T>) => Promise<T>;\n  readOne: <T>(type: string, filter: Partial<T>) => Promise<T>;\n  readOneId: <T>(type: string, filter: Partial<T>) => Promise<string>;\n  readMany: <T>(type: string, filter: Partial<T>) => Promise<T[]>;\n  readManyIds: <T>(type: string, filter: Partial<T>) => Promise<string[]>;\n  update: <T>(\n    type: string,\n    id: string,\n    update: Partial<T>,\n    filter?: Partial<T>\n  ) => Promise<void>;\n  upsert: <T>(\n    type: string,\n    initial: Partial<T>,\n    filter: Partial<T>\n  ) => Promise<Partial<T> & { id: string; created: boolean }[]>;\n  delete: <T>(type: string, id: string, filter?: Partial<T>) => Promise<string>;\n  deleteMany: <T>(type: string, filter?: Partial<T>) => Promise<string[]>;\n\n  // updateByValue: <T>(type: string, update: Partial<T>, ...selectors: [{ [key: string]: string }]) => Promise<void>;\n}\n"]}