{"version":3,"file":"DefaultAuthentication.js","sourceRoot":"/","sources":["src/auth/DefaultAuthentication.ts"],"names":[],"mappings":";;AAAA,2CAA+B;AAK/B,gCAAkC;AAClC,sCAA+B;AAE/B,MAAM,EAAE,KAAK,EAAE,KAAK,EAAE,GAAG,gBAAM,CAAC,MAAM,CAAC,CAAC;AASxC,MAAM,cAAc,GAAG,CAAC,KAAa,EAA4B,EAAE,CACjE,oBAAK,CAAC,GAAG,cAAQ,UAAU,EAAE;IAC3B,OAAO,EAAE;QACP,cAAc,EAAE,kBAAkB;QAClC,aAAa,EAAE,UAAU,KAAK,EAAE;KACjC;CACF,CAAC,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,EAAE;IACjB,IAAI,MAAM,CAAC,EAAE,EAAE;QACb,OAAO,MAAM,CAAC,IAAI,EAAE,CAAC;KACtB;IACD,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC;AACrC,CAAC,CAAC,CAAC;AAEL,MAAM,qBAAqB;IAGzB,YAAY,QAA2B;QACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC3B,CAAC;IAED,eAAe,CAAC,QAAgB;QAC9B,IAAI,KAAK,GAAG,QAAQ,CAAC;QACrB,IAAI,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,QAAQ,CAAC,SAAS,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,SAAS,EAAE;YACjE,KAAK,GAAG,QAAQ,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SAC/B;QACD,OAAO,cAAc,CAAC,KAAK,CAAC;aACzB,IAAI,CAAC,CAAC,QAAQ,EAAE,EAAE,CACjB,IAAI,CAAC,QAAQ,CAAC,aAAa,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,CAAC,IAAI,EAAE,EAAE;YACtD,IAAI,CAAC,IAAI,EAAE;gBACT,KAAK,CAAC,qBAAqB,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC;gBAC5C,OAAO,IAAI,CAAC,QAAQ;qBACjB,UAAU,CAAC;oBACV,GAAG,EAAE,QAAQ,CAAC,GAAG;oBACjB,IAAI,EAAE,QAAQ,CAAC,IAAI;oBACnB,SAAS,EAAE,QAAQ,CAAC,SAAS;iBAC9B,CAAC;qBACD,IAAI,CAAC,CAAC,WAAW,EAAE,EAAE,CAAC,WAAW,CAAC,CAAC;aACvC;YACD,OAAO,IAAI,CAAC;QACd,CAAC,CAAC,CACH;aACA,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;YACX,KAAK,CAAC,yBAAyB,CAAC,CAAC;YACjC,KAAK,CAAC,CAAC,CAAC,CAAC;YACT,MAAM,IAAI,KAAK,CAAC,qBAAqB,CAAC,CAAC;QACzC,CAAC,CAAC,CAAC;IACP,CAAC;IAED,gBAAgB,CAAC,GAAgB;QAC/B,MAAM,aAAa,GAAW,GAAG,CAAC,SAAS,CAAC,eAAe,CAAC,CAAC;QAC7D,IAAI,CAAC,aAAa,EAAE;YAClB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;YACxC,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QACD,MAAM,KAAK,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;QACtC,OAAO,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;IACrC,CAAC;CACF;AAED,kBAAe,qBAAqB,CAAC","sourcesContent":["import fetch from \"node-fetch\";\nimport { HttpRequest } from \"teckos/uws\";\nimport { IRealtimeDatabase } from \"../database/IRealtimeDatabase\";\nimport { User } from \"../types\";\nimport { IAuthentication } from \"./IAuthentication\";\nimport { AUTH_URL } from \"../env\";\nimport logger from \"../logger\";\n\nconst { error, trace } = logger(\"auth\");\n\nexport interface DefaultAuthUser {\n  _id: string;\n  name: string;\n  email: string;\n  avatarUrl?: string;\n}\n\nconst getUserByToken = (token: string): Promise<DefaultAuthUser> =>\n  fetch(`${AUTH_URL}/profile`, {\n    headers: {\n      \"Content-Type\": \"application/json\",\n      Authorization: `Bearer ${token}`,\n    },\n  }).then((result) => {\n    if (result.ok) {\n      return result.json();\n    }\n    throw new Error(result.statusText);\n  });\n\nclass DefaultAuthentication implements IAuthentication {\n  private readonly database;\n\n  constructor(database: IRealtimeDatabase) {\n    this.database = database;\n  }\n\n  verifyWithToken(reqToken: string): Promise<User> {\n    let token = reqToken;\n    if (reqToken.length > 7 && reqToken.substring(0, 7) === \"Bearer \") {\n      token = reqToken.substring(7);\n    }\n    return getUserByToken(token)\n      .then((authUser) =>\n        this.database.readUserByUid(authUser._id).then((user) => {\n          if (!user) {\n            trace(`Creating new user ${authUser.name}`);\n            return this.database\n              .createUser({\n                uid: authUser._id,\n                name: authUser.name,\n                avatarUrl: authUser.avatarUrl,\n              })\n              .then((createdUser) => createdUser);\n          }\n          return user;\n        })\n      )\n      .catch((e) => {\n        error(\"Invalid token delivered\");\n        error(e);\n        throw new Error(\"Invalid credentials\");\n      });\n  }\n\n  authorizeRequest(req: HttpRequest): Promise<User> {\n    const authorization: string = req.getHeader(\"authorization\");\n    if (!authorization) {\n      throw new Error(\"Missing authorization\");\n    }\n    if (!authorization.startsWith(\"Bearer \")) {\n      throw new Error(\"Invalid authorization\");\n    }\n    const token = authorization.substr(7);\n    return this.verifyWithToken(token);\n  }\n}\n\nexport default DefaultAuthentication;\n"]}