{"version":3,"file":"index.js","sourceRoot":"/","sources":["src/index.ts"],"names":[],"mappings":";;AAAA,mCAAmC;AACnC,kCAAkC;AAClC,qCAAoC;AACpC,+BAA2D;AAC3D,2CAAoC;AACpC,4EAAqE;AACrE,2DAAoD;AACpD,2EAAoE;AAEpE,MAAM,EAAC,KAAK,EAAE,IAAI,EAAE,IAAI,EAAC,GAAG,mBAAS,CAAC,OAAO,CAAC,CAAC;AAE/C,MAAM,IAAI,GAAG,UAAI,CAAC,CAAC,CAAC,QAAQ,CAAC,UAAI,EAAE,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;AAE9C,IAAI,eAAS,EAAE;IACb,IAAI,CAAC,iBAAiB,GAAG,eAAS,CAAC,CAAC;CACrC;KAAM;IACL,IAAI,CAAC,0DAA0D,CAAC,CAAC;CAClE;AAED,MAAM,GAAG,GAAG,GAAG,CAAC,GAAG,EAAE,CAAC;AACtB,MAAM,EAAE,GAAG,IAAI,oBAAW,CAAC,GAAG,EAAE;IAC9B,QAAQ,EAAE,eAAS;CACpB,CAAC,CAAC;AAEH,MAAM,KAAK,GAAG,IAAI,qBAAW,CAAC,eAAS,EAAE;IACvC,QAAQ,EAAE,EAAE;IACZ,gBAAgB,EAAE,CAAC;IACnB,eAAe,EAAE,IAAI;IACrB,kBAAkB,EAAE,IAAI;CACzB,CAAC,CAAC;AAEH,MAAM,EAAE,GAAG,KAAK,CAAC,EAAE,CAAC,cAAQ,CAAC,CAAC;AAE9B,MAAM,WAAW,GAAG,IAAI,qBAAW,CAAC,EAAE,EAAE,EAAE,CAAC,CAAC;AAC5C,WAAW,CAAC,eAAe,CAAC,IAAI,+BAAqB,CAAC,WAAW,CAAC,CAAC,CAAC;AAEpE,EAAE,CAAC,YAAY,CAAC,CAAC,MAAM,EAAE,EAAE,CAAC,gCAAsB,CAAC,WAAW,EAAE,MAAM,CAAC,CAAC,CAAC;AAEzE,MAAM,KAAK,GAAG,GAAG,EAAE,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,EAAE,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;AAEhE,IAAI,CAAC,cAAc,CAAC,CAAC;AACrB,KAAK,EAAE;KACJ,IAAI,CAAC,GAAG,EAAE,CAAC,IAAI,CAAC,oBAAoB,IAAI,EAAE,CAAC,CAAC;KAC5C,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC","sourcesContent":["import {UWSProvider} from \"teckos\";\nimport * as uWS from \"teckos/uws\";\nimport {MongoClient} from \"mongodb\";\nimport {MONGO_DB, MONGO_URL, PORT, REDIS_URL} from \"./env\";\nimport useLogger from \"./useLogger\";\nimport handleSocketConnection from \"./socket/handleSocketConnection\";\nimport Distributor from \"./distributor/Distributor\";\nimport MediasoupStageHandler from \"./handler/MediasoupStageHandler\";\n\nconst {error, warn, info} = useLogger(\"start\");\n\nconst port = PORT ? parseInt(PORT, 10) : 3000;\n\nif (REDIS_URL) {\n  info(\"Using redis at \" + REDIS_URL);\n} else {\n  warn(\"Not synchronizing via redis - running in standalone mode\");\n}\n\nconst uws = uWS.App();\nconst io = new UWSProvider(uws, {\n  redisUrl: REDIS_URL,\n});\n\nconst store = new MongoClient(MONGO_URL, {\n  poolSize: 10,\n  bufferMaxEntries: 0,\n  useNewUrlParser: true,\n  useUnifiedTopology: true,\n});\n\nconst db = store.db(MONGO_DB);\n\nconst distributor = new Distributor(io, db);\ndistributor.addStageHandler(new MediasoupStageHandler(distributor));\n\nio.onConnection((socket) => handleSocketConnection(distributor, socket));\n\nconst start = () => store.connect().then(() => io.listen(port));\n\ninfo(\"Starting ...\");\nstart()\n  .then(() => info(`Listening on port${port}`))\n  .catch((e) => error(e));\n"]}