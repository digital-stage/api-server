{"version":3,"file":"IStageHandler.js","sourceRoot":"/","sources":["src/handler/IStageHandler.ts"],"names":[],"mappings":"","sourcesContent":["import { ObjectId } from \"mongodb\";\nimport Stage from \"../../types/model/Stage\";\nimport StageMember from \"../../types/model/StageMember\";\n\n/**\n * Use this interface to implement a stage handler,\n * that will invoke necessary server or add information to the stage.\n * Try to return the stage object as soon as possible,\n * but with the necessary payload you'll need in your clients.\n */\ninterface IStageHandler {\n  prepareStage: (\n    stage: Partial<Omit<Stage<ObjectId>, \"_id\">>\n  ) => Promise<Partial<Omit<Stage<ObjectId>, \"_id\">>>;\n  prepareStageMember: (\n    stageMember: Omit<StageMember<ObjectId>, \"_id\">\n  ) => Promise<Omit<StageMember<ObjectId>, \"_id\">>;\n\n  cleanUpStage: (stage: Stage<ObjectId>) => void;\n  cleanUpStageMember: (stageMember: StageMember<ObjectId>) => void;\n}\n\nexport default IStageHandler;\n"]}