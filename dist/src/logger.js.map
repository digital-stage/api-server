{"version":3,"file":"logger.js","sourceRoot":"/","sources":["src/logger.ts"],"names":[],"mappings":"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","sourcesContent":["/* eslint-disable no-console */\nimport debug, { Debugger } from \"debug\";\nimport * as Sentry from \"@sentry/node\";\nimport * as uncaught from \"uncaught\";\nimport * as Tracing from \"@sentry/tracing\";\nimport { CaptureConsole, RewriteFrames } from \"@sentry/integrations\";\nimport { SENTRY_DSN, USE_SENTRY } from \"./env\";\n\nconst d = debug(\"server\");\n\ndeclare global {\n  namespace NodeJS {\n    interface Global {\n      __rootdir__: string;\n    }\n  }\n}\n\nuncaught.start();\n\nif (USE_SENTRY) {\n  d(\"Using Sentry for logging\");\n  Sentry.init({\n    dsn: SENTRY_DSN,\n    release: process.env.RELEASE,\n\n    integrations: [\n      new Tracing.Integrations.Mongo(),\n      new CaptureConsole({\n        levels: [\"warn\", \"error\"],\n      }),\n      new RewriteFrames({\n        root: global.__rootdir__,\n      }),\n    ],\n\n    // We recommend adjusting this value in production, or using tracesSampler\n    // for finer control\n    tracesSampleRate: 1.0,\n  });\n\n  Sentry.startTransaction({\n    op: \"test\",\n    name: \"My First Test Transaction\",\n  });\n\n  uncaught.addListener((e) => {\n    Sentry.captureException(e);\n  });\n} else {\n  d(\"Using console for logging\");\n  const reportError = d.extend(\"error\");\n  reportError.log = console.error.bind(console);\n  uncaught.addListener((e) => {\n    reportError(\"Uncaught error or rejection: \", e.message);\n  });\n}\n\nconst logger = (\n  context: string\n): {\n  info: Debugger;\n  trace: Debugger;\n  warn: Debugger;\n  error: Debugger;\n} => {\n  let namespace = context;\n  if (namespace.length > 0) {\n    namespace += \":\";\n  }\n  const info = d.extend(`${namespace}info`);\n  info.log = console.info.bind(console);\n  const trace = d.extend(`${namespace}trace`);\n  trace.log = console.debug.bind(console);\n  let warn;\n  let error;\n  if (USE_SENTRY) {\n    warn = (message) => console.warn(`${namespace}:warn ${message}`);\n    error = (message: string | Error) => {\n      if (message) {\n        console.error(`${namespace}:error ${message}`);\n        console.trace(message);\n        Sentry.captureException(message);\n      }\n    };\n  } else {\n    warn = d.extend(`${namespace}warn`);\n    warn.log = console.warn.bind(console);\n    error = d.extend(`${namespace}error`);\n    error.log = console.error.bind(console);\n  }\n  return {\n    info,\n    trace,\n    warn,\n    error,\n  };\n};\n\nexport default logger;\n"]}