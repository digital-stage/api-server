{"version":3,"file":"handleClientSocket.js","sourceRoot":"/","sources":["src/socket/handle/handleClientSocket.ts"],"names":[],"mappings":"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","sourcesContent":["import ITeckosSocket from \"teckos/lib/types/ITeckosSocket\";\nimport User from \"../../../types/model/User\";\nimport Device from \"../../../types/model/Device\";\nimport ClientEvents from \"../../../types/ClientEvents\";\nimport Payloads from \"../../../types/Payloads\";\nimport IStore, {TypeNames} from \"../../store/IStore\";\nimport sendToUser from \"../send/sendToUser\";\nimport {ITeckosProvider} from \"teckos\";\nimport ServerEvents from \"../../../types/ServerEvents\";\nimport logger from \"../../logger\";\nimport StageMember from \"../../../types/model/StageMember\";\nimport Stage from \"../../../types/model/Stage\";\nimport RemoteAudioTrack from \"../../../types/model/RemoteAudioTrack\";\nimport Group from \"../../../types/model/Group\";\nimport sendToStage from \"../send/sendToStage\";\nimport RemoteVideoTrack from \"../../../types/model/RemoteVideoTrack\";\n\nconst {error} = logger(\"handleClientSocket\");\n\nconst handleClientSocket = (io: ITeckosProvider, store: IStore, socket: ITeckosSocket, user: User, initialDevice: Partial<Device>) => {\n    // Resolve actions that depends on others, but without permission checks - these are implemented inside the socket handlers\n\n    socket.on(ClientEvents.ChangeUser, (payload: Payloads.ChangeUser) => {\n        // Optimized for performance: first emit, then update\n        sendToUser(io, user.id, ServerEvents.UserChanged, payload as Payloads.UserChanged);\n        return store.update<User>(TypeNames.User, user.id, payload)\n            .catch(e => error(e));\n    });\n\n    socket.on(ClientEvents.ChangeDevice, (payload: Payloads.ChangeDevice) => {\n        // Security check: first try to update then emit\n        return store.update(TypeNames.Device, payload.id, payload, {userId: user.id})\n            .then(() => sendToUser(io, user.id, ServerEvents.DeviceChanged, payload as Payloads.DeviceChanged))\n            .catch(e => error(e));\n    });\n\n    socket.on(ClientEvents.CreateStage, (payload: Payloads.CreateStage) => {\n        // Check permissions\n        return store.read<User>(TypeNames.User, user.id, {canCreateStage: true})\n            .then(() => store.create<Stage>(TypeNames.Stage, {...payload, admins: [...payload.admins, user.id]}))\n            .then(stage => {\n                sendToUser(io, user.id, ServerEvents.DeviceChanged, stage as Payloads.StageAdded);\n                return stage;\n            })\n            // Create default group\n            .then(stage => store.create<Group>(TypeNames.Group, {stageId: stage.id}))\n            .then(group => sendToUser(io, user.id, ServerEvents.GroupAdded, group))\n            .catch(e => error(e));\n    });\n\n    socket.on(ClientEvents.ChangeStage, (payload: Payloads.ChangeStage) => {\n        // Check permissions\n        return store.update<Stage>(TypeNames.Stage, payload.id, payload, {admins: [user.id]})\n            .then(() => sendToStage(io, store, payload.id, ServerEvents.StageChanged, payload))\n            .catch(e => error(e));\n    });\n\n    socket.on(ClientEvents.RemoveStage, (payload: Payloads.RemoveStage) => {\n        // Check permissions\n        return store.delete<Stage>(TypeNames.Stage, payload, {admins: [user.id]})\n            .then(() => sendToStage(io, store, payload, ServerEvents.StageRemoved, payload))\n            .then(() => store.deleteMany<Group>(TypeNames.Group, {stageId: payload}))\n            .then(groupIds => groupIds.map(groupId => sendToStage(io, store, payload, ServerEvents.GroupRemoved, groupId)))\n            .then(() => store.deleteMany<StageMember>(TypeNames.StageMember, {stageId: payload}))\n            .then(stageMemberIds => stageMemberIds.map(stageMemberId => sendToStage(io, store, payload, ServerEvents.StageMemberRemoved, stageMemberId)))\n            .then(() => store.deleteMany<RemoteAudioTrack>(TypeNames.RemoteAudioTrack, {stageMemberId}))\n    });\n}\nexport default handleClientSocket;"]}