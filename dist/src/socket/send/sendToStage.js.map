{"version":3,"file":"sendToStage.js","sourceRoot":"/","sources":["src/socket/send/sendToStage.ts"],"names":[],"mappings":";;AAAA,+CAAqD;AAIrD,6CAAsC;AAEtC,MAAM,WAAW,GAAG,CAAC,EAAmB,EAAE,KAAa,EAAE,OAAgB,EAAE,KAAa,EAAE,OAAa,EAAiB,EAAE;IACtH,OAAO,KAAK;SACP,gBAAgB,CAAc,kBAAS,CAAC,WAAW,EAAE,EAAC,SAAS,EAAE,OAAO,EAAC,CAAC;SAC1E,IAAI,CAAC,YAAY,CAAC,EAAE,CAAC,YAAY,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE,CAAC,oBAAU,CAAC,EAAE,EAAE,WAAW,CAAC,MAAM,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC,CAAC;AACvH,CAAC,CAAA;AAED,kBAAe,WAAW,CAAC","sourcesContent":["import IStore, {TypeNames} from \"../../store/IStore\";\nimport {StageId} from \"../../../types/IdTypes\";\nimport StageMember from \"../../../types/model/StageMember\";\nimport {ITeckosProvider} from \"teckos\";\nimport sendToUser from \"./sendToUser\";\n\nconst sendToStage = (io: ITeckosProvider, store: IStore, stageId: StageId, event: string, payload?: any): Promise<void> => {\n    return store\n        .readManyByValues<StageMember>(TypeNames.StageMember, {\"stageId\": stageId})\n        .then(stageMembers => stageMembers.forEach(stageMember => sendToUser(io, stageMember.userId, event, payload)));\n}\n\nexport default sendToStage;"]}