{"version":3,"file":"SocketHandler.js","sourceRoot":"/","sources":["socket/SocketHandler.ts"],"names":[],"mappings":";;AAEA,wDAAiD;AAEjD,gCAA+B;AAC/B,sCAA+B;AAE/B,MAAM,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,gBAAM,CAAC,QAAQ,CAAC,CAAC;AAEhD,MAAM,aAAa,GAAyB,CAAC,MAAqB,EAAE,EAAE;IAClE,MAAM,CAAC,EAAE,CAAC,sBAAY,CAAC,eAAe,EAAE,CAAC,OAAiC,EAAE,EAAE;QAC1E,MAAM,EAAC,MAAM,EAAE,MAAM,EAAC,GAAG,OAAO,CAAC;QACjC,IAAI,MAAM,EAAE;YACR,gCAAgC;YAChC,IAAI,MAAM,KAAK,aAAO,EAAE;gBACpB,OAAO,IAAI,CAAC,cAAc,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,EAAE,EAAE;oBAC5D,KAAK,CAAC,kCAAkC,GAAG,EAAE,CAAC,CAAC;oBAC/C,MAAM,CAAC,UAAU,EAAE,CAAC;gBACxB,CAAC,CAAC,CAAC;aACN;YACD,KAAK,CAAC,UAAU,MAAM,CAAC,GAAG,sCAAsC,CAAC,CAAC;SACrE;aAAM;YACH,KAAK,CAAC,UAAU,MAAM,CAAC,GAAG,8BAA8B,CAAC,CAAC;SAC7D;QACD,OAAO,MAAM,CAAC,UAAU,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;IAEH,MAAM,CAAC,EAAE,CAAC,sBAAY,CAAC,gBAAgB,EAAE,CAAC,OAAkC,EAAE,EAAE;QAC5E,MAAM,EAAC,KAAK,EAAE,MAAM,EAAC,GAAG,OAAO,CAAC;QAChC,KAAK,CAAC,2BAA2B,CAAC,CAAC;QACnC,IAAI,KAAK,EAAE;YACP,OAAO,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,MAAM,EAAE,KAAK,EAAE,MAAM,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE;gBAC/D,MAAM,CAAC,UAAU,EAAE,CAAC;gBACpB,KAAK,CAAC,CAAC,CAAC,CAAC;YACb,CAAC,CAAC,CAAC;SACN;QACD,IAAI,CAAC,uCAAuC,CAAC,CAAC;QAC9C,OAAO,MAAM,CAAC,UAAU,EAAE,CAAC;IAC/B,CAAC,CAAC,CAAC;AACP,CAAC,CAAA;AACD,kBAAe,aAAa,CAAC","sourcesContent":["import ITeckosSocket from \"teckos/lib/types/ITeckosSocket\";\nimport {ITeckosSocketHandler} from \"teckos/lib/types/ITeckosSocketHandler\";\nimport ClientEvents from \"../types/ClientEvents\";\nimport Payloads from \"../types/Payloads\";\nimport {API_KEY} from \"../env\";\nimport logger from \"../logger\";\n\nconst { error, warn, trace } = logger(\"socket\");\n\nconst SocketHandler: ITeckosSocketHandler = (socket: ITeckosSocket) => {\n    socket.on(ClientEvents.ConnectAsRouter, (payload: Payloads.ConnectAsRouter) => {\n        const {apiKey, router} = payload;\n        if (apiKey) {\n            // A router is trying to connect\n            if (apiKey === API_KEY) {\n                return this._routerHandler.handle(socket, router).catch((err) => {\n                    error(`Router handler reported error: ${err}`);\n                    socket.disconnect();\n                });\n            }\n            error(`Router ${router.url} tried to sign in with wrong api key`);\n        } else {\n            error(`Router ${router.url} dit not provide any api key`);\n        }\n        return socket.disconnect();\n    });\n\n    socket.on(ClientEvents.ConnectWithToken, (payload: Payloads.ConnectWithToken) => {\n        const {token, device} = payload;\n        trace(\"New connection with token\");\n        if (token) {\n            return this._userHandler.handle(socket, token, device).catch((e) => {\n                socket.disconnect();\n                error(e);\n            });\n        }\n        warn(\"Attempt to connect with invalid token\");\n        return socket.disconnect();\n    });\n}\nexport default SocketHandler;\n"]}